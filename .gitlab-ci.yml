image: "continuumio/anaconda3:latest"

variables:
  DOCKER_IMAGE_TAG: "neoag-digital-twin"
  DOCKER_REGISTRY: "docker.jedis.nlehd.de:5000"
  DOCKER_REPOSITORY: "deb [arch=amd64] http://download.docker.com/linux/debian $(lsb_release -cs) stable"
  PRJ_NAME: "neoag-dt"
  PRJ_VER:  "0.1.2"
  DOC_SERVER: "195.37.154.74" # don't change this line

stages:
  - build
  - test
  - docs
  - deploy

default:
  before_script:
    - python --version
    - pip --version

    - apt-get update
    - apt-get install -y build-essential rsync
    - conda create --yes --name neoag_dt_env
    - conda init bash
    - source ~/.bashrc
    - conda activate neoag_dt_env
    - cd "${CI_PROJECT_DIR}"
    - python setup.py deps
  after_script:
      - conda init bash
      - source ~/.bashrc
      - conda deactivate
      - conda env remove --name neoag_dt_env

build:
  stage: build
  script:
    - cd "${CI_PROJECT_DIR}"
    - pip install .

unittest:
  stage: test
  dependencies:
    - build
  script:
    - cd "${CI_PROJECT_DIR}"
    - pip install .[tests]
    - python -m pytest tests
  needs: ["build"]

styletest:
  stage: test
  dependencies:
    - build
  script:
    - cd "${CI_PROJECT_DIR}"
    - pip install .[tests]
    - pylint neoag_dt
  needs: [ "build" ]

docker:
  stage: deploy
  only:
    - tags
  except:
    - branches
  timeout: 60m
  script: # TODO: Check if Docker image already exists
    - apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - add-apt-repository "deb [arch=amd64] http://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt-get update
    - apt-get install -y docker-ce docker-ce-cli containerd.io
    - /etc/init.d/docker start
    - cd "${CI_PROJECT_DIR}"
    - docker build --network=host -t "${DOCKER_IMAGE_TAG}:${PRJ_VER}" -t "${DOCKER_REGISTRY}/${DOCKER_IMAGE_TAG}:${PRJ_VER}" .
    - docker login -u "gitlab-runner" -p "#Bf4_c8mM-z_VmZc" "${DOCKER_REGISTRY}"
    - docker push "${DOCKER_REGISTRY}/${DOCKER_IMAGE_TAG}:${PRJ_VER}"
  needs: ["build", "unittest", "styletest"]

sphinx-doc:
  stage: docs
  only:
    - tags
  except:
    - branches
  script:
    - cd "${CI_PROJECT_DIR}"
    - pip install .[docs]
    - cd docs
    - sphinx-build -b html source "${CI_COMMIT_REF_NAME}"
    - ssh web-${PRJ_NAME}@${DOC_SERVER} "rm -rf '/var/www/html/${PRJ_NAME}/${PRJ_VER}';"\
      "mkdir -p '/var/www/html/${PRJ_NAME}/${PRJ_VER}';"
    - rsync -av "${CI_COMMIT_REF_NAME}/." "web-${PRJ_NAME}@${DOC_SERVER}:/var/www/html/${PRJ_NAME}/${PRJ_VER}/"
  needs: ["build", "unittest", "styletest"]
